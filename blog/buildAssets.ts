// =============================================================
// Asset Manager
// =============================================================

import { access, constants, mkdir, readdir, writeFile } from 'node:fs/promises';
import sharp from 'sharp';

const CONTENT_FOLDER = '../content';
const ASSETS_FOLDER = 'assets';

const ImageFormats = ['webp', 'png', 'jpg', 'jpeg'];

type ImageSettings = {
    prefix?: string;
    suffix?: string;
    width: number;
    height: number;
    quality?: number; // default 75
    format?: string; // default webp
};

const makeDirecectoryIfNotExists = async (path: string) => {
    try {
        await access(path, constants.F_OK | constants.W_OK | constants.R_OK);
    } catch {
        await mkdir(path);
    }
};

const writeOutput = async (items: string[]) => {
    const disclaimer = `/*
 This file is auto generated by the asset manager
 Do not edit this file directly
 */
`;

    await writeFile(
        `${ASSETS_FOLDER}/assets.ts`,
        disclaimer + items.join('\n\n') + '\n',
        'utf8'
    );
};

// =============================================================
// Handle cover images
// =============================================================

const COVER_IMG_SETTINGS: ImageSettings[] = [
    {
        width: 848,
        height: 424,
    },
    {
        suffix: 'thumb',
        width: 281,
        height: 158,
    },
];

const getCoverImages = async () => {
    const posts = await readdir(CONTENT_FOLDER);

    console.log('Posts', posts);

    const covers: {
        post: string;
        format: string;
    }[] = [];

    for (const post of posts) {
        // Check if post has cover a cover .ImageFormats
        for (const format of ImageFormats) {
            const cover = `${CONTENT_FOLDER}/${post}/cover.${format}`;

            console.log('Checking', cover);

            try {
                await access(cover, constants.F_OK | constants.R_OK);
                covers.push({
                    post,
                    format,
                });
                break;
            } catch {
                // Ignore error
            }
        }
    }

    return covers;
};

const handleCoverImages = async () => {
    const covers = await getCoverImages();

    let result = 'export const covers = {\n';

    for (const cover of covers) {
        result += `    '${cover.post}': {\n`;

        for (const settings of COVER_IMG_SETTINGS) {
            const { prefix, suffix, width, height, quality, format } = settings;

            const input = `${CONTENT_FOLDER}/${cover.post}/cover.${cover.format}`;

            // eslint-disable-next-line sonarjs/no-nested-template-literals
            const key = `${prefix || ''}cover${suffix ? `-${suffix}` : ''}`;
            const output = `${ASSETS_FOLDER}/${cover.post}/${key}.${
                format || 'webp'
            }`;

            console.log(`Converting ${input} to ${output}`);

            await makeDirecectoryIfNotExists(`${ASSETS_FOLDER}/${cover.post}`);

            await sharp(input).resize(width, height).toFile(output);

            result += `        '${key}': import('./${key}.${
                format || 'webp'
            }'),\n`;
        }

        result += '    },\n';
    }

    result += '};';

    return result;
};

// =============================================================
// Main
// =============================================================

const main = async () => {
    // Make sure assets folder exists using fs/promises
    await makeDirecectoryIfNotExists(ASSETS_FOLDER);

    const coverOutput = await handleCoverImages();

    await writeOutput([coverOutput]);
};

main();
