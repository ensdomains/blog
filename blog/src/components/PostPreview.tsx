import 'server-only';

/**
 * assets/assets is generated by the assets builder.
 */
import { covers } from 'assets/assets';
import clsx from 'clsx';
import Image from 'next/image';
import Link from 'next/link';

import { BlogPostMetadataPlus } from '@/lib/get_posts';

import { ENSAvatar } from './ENSAvatar';

type Properties = {
    post: BlogPostMetadataPlus;
    variant?: 'horizontal' | 'vertical';
};

export const BlogPostPreview = async ({ post, variant }: Properties) => {
    const cover = Object.keys(covers).includes(post.file)
        ? await covers[post.file as keyof typeof covers]['cover-thumb']
              .then((image) => image.default)
              .catch(() => {
                  console.error('Failed to load cover for post', post.file);
              })
        : undefined;

    const { readingTime } = (await import(
        `../../../content/${post.file}/readme.mdx`
    )) as {
        readingTime: string;
    };

    return (
        <Link
            href={'/post/' + post.slug}
            className={clsx(
                'outline-ens-blue h-full w-full overflow-hidden rounded-lg bg-white outline-2 transition-all hover:bg-gray-50 hover:outline',
                variant === 'horizontal'
                    ? 'grid grid-cols-1 flex-row md:grid-cols-2'
                    : 'flex flex-col'
            )}
        >
            <span className="bg-ens-grey1 aspect-cover w-full">
                {cover ? (
                    <Image
                        src={cover}
                        className="aspect-cover h-full w-full object-cover"
                        alt={post.title}
                    />
                ) : (
                    <img
                        src={post.cover}
                        className="aspect-cover h-full w-full object-cover"
                        alt={post.title}
                    />
                )}
            </span>
            <span
                className={clsx(
                    'flex h-full flex-col gap-2 p-5 md:p-6 max-h-[200px] my-auto',
                    variant == 'horizontal'
                        ? 'border-t md:border-none'
                        : 'border-t'
                )}
            >
                <span className="flex w-full justify-between">
                    <span className="text-ens-blue block truncate text-lg font-bold">
                        {post.title}
                    </span>
                    <span>{/* TODO: Badges here */}</span>
                </span>
                <span className="grow pb-2 text-base">{post.description}</span>
                {/* <span className="flex grow flex-col p-2">
                    <span className="text-ens-grey2 text-xs">{post.date}</span>
                </span> */}
                {/* {post.tags && (
                    <span className="flex flex-wrap gap-1 px-2 pb-2">
                        {post.tags.map((tag) => (
                            <SmallTag tag={tag} />
                        ))}
                    </span>
                )} */}
                <span className="flex w-full items-end justify-between">
                    <span className="flex items-center gap-2">
                        <span className="flex -space-x-2">
                            {post.authors.map((author) => (
                                <ENSAvatar name={author} size="small" />
                            ))}
                        </span>
                        <span>{post.authors.join(', ')}</span>
                    </span>
                    <span className="text-gray-400">{readingTime}</span>
                </span>
            </span>
        </Link>
    );
};
